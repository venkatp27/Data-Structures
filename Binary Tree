import java.util.ArrayList;
import java.util.Arrays;

Public class Node {
	Node leftchild;
	Node rightchild;
	int key;
	String string;
	int count = 0;
	
	public Node(int key, String string) {
		this.key = key;
		this.string = string;
		}
	
	Public String toString() {
		return string +" has the key " + key;
		}
}


public class binaryTree{
	Node root;
	

	public void addNode(int key, String string) {
		Node newNode = new Node(key, string);
		
		if(root == null) {
			root = newNode;
			} else {
					Node focusNode = root;
					Node parent;
					
					while(true) {
						parent = focusNode;
						
						if(key < focusNode.key) {
							focusNode.leftchild = focusNode;
								
									if(focusNode == null) {
										parent.leftChild = newNode;
										return;
										}
										
								} else {
										focusNode.rightChild = focusNode;
										
												if(focusNode == null) {
													parent.rightChild = newNode;
													return;
													}
  										}
									}
							}
					}
	public void inOrderTree( Node focusNode) {
		if(focusNode!= null) {
			inOrderTree(focusNode.leftChild);
			System.out.println(focusNode);
			inOrderTree(focusNode.rightChild);
			}
	}
	
	public void preOrderTree( Node focusNode) {
		if(focusNode!= null) {
			System.out.println(focusNode);
			preOrderTree(focusNode.leftChild);
			preOrderTree(focusNode.rightChild);
			}
	}
	
	public void preOrderTree( Node focusNode) {
		if(focusNode!= null) {
			preOrderTree(focusNode.leftChild);
			preOrderTree(focusNode.rightChild);
			System.out.println(focusNode);
			}
	}
	
	public int findNode(int key) {
		Node focusNode = root;
		
			while(focusNode.key!= key) {
			 	if(key < focusNode.key) {
					focusNode = focusNode.leftchild;
					} else{
									focusNode = focusNode.rightChild;
								}
							if(focusNode == null) {
								return null;
				}
			}
			retrun focusNode;
		}
		
		public void leafNodes(Node node) {
		
			if(node!=null) {
				leafNodes(node.leftChild);
				leafNodes(node.rightChild);
				
				if(node.leftChild == null && node.rightChild == null) {
					System.out.println(node.key);
					count++;
					}
				}
			}
			
			public int maxElement(Node node) {
				int max = node.key;
				if(node.leftChild!= null) {
					max = Math.max(max, maxElement(node.leftChild));
					}
					
				if(node.rightChild!= null) {
					max = Math.max(max, maxElement(node.rightChild));
					} 
					return max;
					
				Public void displayPath(Node node, ArrayList<Integer> path) {
					if(node == null) {
						return null;
						}
						path.add(node.key);
						
						if(node.leftChild == null && node.rightChild == null) {
							System.out.println(path);
							return;
							} else {
										displayPath(node.leftChild, new ArrayList<Integer> path);
										displayPath(node.rightchild, new ArrayList<Integer> path);
										}
					}
							
							
						
								
								
						
			
			
			
